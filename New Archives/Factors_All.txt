  static List<Integer> Psig = new ArrayList<Integer>();  
    static List<Long> Facts = new ArrayList<Long>();    
    public static void PrimeSignature_n_PrimeFactors(long n){
        Psig.clear();
        Facts.clear();
      long te;  
     int z=0,t; 
    te=n;
    while(te>1)
    { t=0;
     Boolean chk=true;
    for(;Primes[z]*Primes[z]<=te;z++)
    {if(te%Primes[z]==0){
        Facts.add((long)Primes[z]);
            while(te%Primes[z]==0)
            {t++;te=te/Primes[z];}
            Psig.add(t);
            chk=false;
            break;
    }  }
            if(chk)
              {Facts.add(te);
               Psig.add(1);
               break;
                       }}
       // System.out.println(Psig+"ajncasj  "+Facts);
        
        
      // return Facts;
    }
    static List<Long> AllFact= new ArrayList<Long>();
    public static void forloop( int i ,long tmp)
    {  if(i==0)
         AllFact.add(tmp);
    else{
    for(int j=0;j<=Psig.get(i-1);j++)
    { if(j!=0)tmp*=Facts.get(i-1);
       forloop(i-1,tmp);
    
    }
        
        
        }
    }
   public static void AllFacts(long n)
   {   AllFact.clear();
       PrimeSignature_n_PrimeFactors(n);
     int len=Facts.size();
        forloop( len,1L);
   
   
   }
    
    
    
    
    
    
    static int ub=316250;//upper bound
static int[] Primes=new int[ub+1];
static  int Ppi=0; 
static void Primegen(){
    
        for(int i=2;i<=ub;i++)
        {if(Primes[i]==0)
        {Primes[Ppi]=i;
        Ppi++;
        for(int j=2;j*i<=ub;j++)
            Primes[j*i]=1;      
        }
            }
        System.out.println(Ppi);
        System.out.println(Primes[Ppi-1]);
}
  
