public static void cubic( double A, double B, double C )
{
    double S, T, Im,X1,X2,X3;

    double Q = (3*B - Math.pow(A, 2))/9;
    double R = (9*A*B - 27*C - 2*Math.pow(A, 3))/54;
    double D = Math.pow(Q, 3) + Math.pow(R, 2);    // polynomial discriminant

    if (D >= 0)                                 // complex or duplicate roots
    {
         S = sgn(R + Math.sqrt(D))*Math.pow(Math.abs(R + Math.sqrt(D)),(1/3));
         T = sgn(R - Math.sqrt(D))*Math.pow(Math.abs(R - Math.sqrt(D)),(1/3));

        X1 = -A/3 + (S + T);                    // real root
        X2 = -A/3 - (S + T)/2;                  // real part of complex root
        X3 = -A/3 - (S + T)/2;                  // real part of complex root
        Im = Math.abs(Math.sqrt(3)*(S - T)/2);  // complex part of root pair
    }
    else                                        // distinct real roots
    {
        double th = Math.acos(R/Math.sqrt(-Math.pow(Q, 3)));
        
        X1 = 2*Math.sqrt(-Q)*Math.cos(th/3) - A/3;
        X2 = 2*Math.sqrt(-Q)*Math.cos((th + 2*Math.PI)/3) - A/3;
        X3 = 2*Math.sqrt(-Q)*Math.cos((th + 4*Math.PI)/3) - A/3;
        
    }
    System.out.println(X1+" "+X2+" "+X3);
                                  // 0.0 if real roots
}

// sign of number
public static int sgn( double x )
{
    if (x < 0.0) return -1;
    return 1;
}