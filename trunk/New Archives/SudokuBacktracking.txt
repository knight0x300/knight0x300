package sudoku_marathon1;

//Author KNIGHT0X300 
public class Sudoku_Marathon1 {
     static int model[][] ;
    public static void main(String[] args) throws Exception {
        model = new int[9][9] ;
        model[0][0] = 8 ;
      model[0][1] = 6 ;
      model[0][4] = 2 ;
     

      model[1][3] = 7 ;
      model[1][7] = 5 ;
      model[1][8] = 9 ;

      

      model[3][4] = 6 ;
      model[3][6] = 8 ;

      model[4][1] = 4 ;
      

      model[5][2] = 5 ;
      model[5][3] = 3 ;
      model[5][8] = 7 ;

      

      model[7][1] = 2 ;
      model[7][6] = 6 ;
     

      model[8][2] = 7 ;
      model[8][3] = 5 ;
      model[8][5] = 9 ;
      
      long time = System.nanoTime();
      try{
          
      solve( 0, 0 ) ;
      }
      catch(Exception e){
        for (int i = 0; i < 9; i++) {
            System.out.println("");
            for (int j = 0; j < 9; j++) {
                System.out.print(model[i][j]+" ");
            }
        }
      
 System.out.println("Finished in: " + (System.nanoTime() - time) / Math.pow(10, 6) + "ms");
      }
    }
    static boolean checkRow( int row, int num )
   {
      for( int col = 0; col < 9; col++ )
         if( model[row][col] == num )
            return false ;

      return true ;
   }

   /** Checks if num is an acceptable value for the given column */
   static boolean checkCol( int col, int num )
   {
      for( int row = 0; row < 9; row++ )
         if( model[row][col] == num )
            return false ;

      return true ;
   }

   /** Checks if num is an acceptable value for the box around row and col */
   static boolean checkBox( int row, int col, int num )
   {
      row = (row / 3) * 3 ;
      col = (col / 3) * 3 ;

      for( int r = 0; r < 3; r++ )
         for( int c = 0; c < 3; c++ )
         if( model[row+r][col+c] == num )
            return false ;

      return true ;
   }

    public static void solve( int row, int col ) throws Exception
   {
      // Throw an exception to stop the process if the puzzle is solved
      if( row > 8 )
         throw new Exception( "Solution found" ) ;

      // If the cell is not empty, continue with the next cell
      if( model[row][col] != 0 )
         next( row, col ) ;
      else
      {
         // Find a valid number for the empty cell
         for( int num = 1; num < 10; num++ )
         {
            if( checkRow(row,num) && checkCol(col,num) && checkBox(row,col,num) )
            {
               model[row][col] = num ;
               

               // Let the observer see it
               

               // Delegate work on the next cell to a recursive call
               next( row, col ) ;
            }
         }

         // No valid number was found, clean up and return to caller
         model[row][col] = 0 ;
        
      }
   }

   /** Calls solve for the next cell */
   public static void next( int row, int col ) throws Exception
   {
      if( col < 8 )
         solve( row, col + 1 ) ;
      else
         solve( row + 1, 0 ) ;
   }
}
