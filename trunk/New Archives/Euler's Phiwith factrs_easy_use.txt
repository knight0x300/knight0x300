 static int[] Fact=new int[1000];
    static int t;
    static int ub=1000000;//upper bound
static int[] Primes=new int[ub+1];
static  int Ppi=0; 
static void Primegen(){
    
        for(int i=2;i<=ub;i++)
        {if(Primes[i]==0)
        {Primes[Ppi]=i;
        Ppi++;
        for(int j=2;j*i<=ub;j++)
            Primes[j*i]=1;      
        }
            }
        System.out.println(Ppi);
        System.out.println(Primes[Ppi-1]);
}
    public static void factrs( long n){
      long te;
      int z;  
    te=n;t=0;
    for(z=0;Primes[z]<=te/Primes[z];z++)
    {if(te%Primes[z]==0){Fact[t]=Primes[z];t++;te=te/Primes[z];z--;}
           }
    if(te!=1)Fact[t]=(int)te;t++;
         }
    public static long eulertau (long n){
        if((n==1)||(n==0))return 0;
        else{   factrs(n);
       // System.out.println(t);
       // System.out.println("alk");
        long r=n;
    r=r*(long)((Fact[0]-1))/(Fact[0]);
    for(int w=1;w<t;w++){
    if(Fact[w]!=Fact[w-1]){
      //  System.out.println(Fact[w]);
        r=r*(long)((Fact[w]-1))/(Fact[w]);}}
    return r;
    } }