 static int ub;//upper bound (maximal value of n)
static int[] Primes=new int[ub+1];
static  int Ppi=0; 
static void Primegen(){
    
        for(int i=2;i<=ub;i++)
        {if(Primes[i]==0)
        {Primes[Ppi]=i;
        Ppi++;
        for(int j=2;j*i<=ub;j++)
            Primes[j*i]=1;      
        }
            }
        System.out.println(Ppi);
        System.out.println(Primes[Ppi-1]);
}
 public static long maxpw(double n ,double p){
   long tot=0;
   double nn=n,pp=p;
       while(nn/pp>=1)
       {tot+=(long)(nn/pp);
       nn=nn/pp;}
   return tot;
   
   }
static BigInteger nCrmodK (int n, int r, int k){
    BigInteger ret=BigInteger.ONE,K=BigInteger.valueOf(k);
    long power;
    for (int i = 0; (Primes[i]<=n)&&(i<Ppi) ; i++) {
       power=maxpw(n,Primes[i])-maxpw(n-r,Primes[i])-maxpw(r,Primes[i]);   
       ret=(ret.multiply(BigInteger.valueOf(Primes[i]).pow((int)power))).mod(K);//change
    }

return ret;
}