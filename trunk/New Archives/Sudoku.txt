/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pe96.sudoku.solver;

import java.applet.* ;
import java.awt.* ;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

/**
 * Solves a sudoku puzzle by recursion and backtracking
 */
class PE96SudokuSolver{


    /**
     * Print the specified Sudoku problem and its solution.  The
     * problem is encoded as specified in the class documentation
     * above.
     *
     * @param args The command-line arguments encoding the problem.
//     */
//   static public char getChar() throws IOException
//  {
//  char ch = (char) System.in.read();
//  input(); 
//  return ch;
//  }
//  static public void input() throws IOException
//  {
// while ( (char) System.in.read() != '\n' ); 
//  }
  
    
    public static void main(String[] args) throws IOException {
        int[][] matrix =new int[9][9];
      
//        Scanner scn=new Scanner(System.in);
//        BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
//       String line=null;  
       char c='k';
       long tot=0;
     while(c!='z'){   
         
         for(int i=0;i<9;i++)
       { System.out.println("");
           for(int j=0;j<9;j++)
       {
       matrix[i][j]=(int)System.in.read()-48;
         //  System.out.print(matrix[i][j]);
          // System.out.print(" ");
       }
       c=(char)System.in.read();}
     c='a';
        //  System.out.println(c);
        while(c!='\n'){
        c=(char)System.in.read();}
        writeMatrix(matrix);
       
        if (solve(0,0,matrix))    // solves in place
        { writeMatrix(matrix);tot=tot+matrix[0][0]*100+matrix[0][1]*10+matrix[0][2];
         System.out.println(tot);}
        else
            System.out.println("NugfbnfasiufbdsfihadskbfsadkfbdsaifkbasfiaskbfASDKHFBSAKJFNJSDAJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ");
    }}

    static boolean solve(int i, int j, int[][] cells) {
        if (i == 9) {
            i = 0;
            if (++j == 9)
                return true;
        }
        if (cells[i][j] != 0)  // skip filled cells
            return solve(i+1,j,cells);

        for (int val = 1; val <= 9; ++val) {
            if (legal(i,j,val,cells)) {
                cells[i][j] = val;
                if (solve(i+1,j,cells))
                    return true;
            }
        }
        cells[i][j] = 0; // reset on backtrack
        return false;
    }

    static boolean legal(int i, int j, int val, int[][] cells) {
        for (int k = 0; k < 9; ++k)  // row
            if (val == cells[k][j])
                return false;

        for (int k = 0; k < 9; ++k) // col
            if (val == cells[i][k])
                return false;

        int boxRowOffset = (i / 3)*3;
        int boxColOffset = (j / 3)*3;
        for (int k = 0; k < 3; ++k) // box
            for (int m = 0; m < 3; ++m)
                if (val == cells[boxRowOffset+k][boxColOffset+m])
                    return false;

        return true; // no violations, so it's legal
    }

    static int[][] parseProblem(String[] args) {
        int[][] problem = new int[9][9]; // default 0 vals
        for (int n = 0; n < args.length; ++n) {
            int i = Integer.parseInt(args[n].substring(0,1));
            int j = Integer.parseInt(args[n].substring(1,2));
            int val = Integer.parseInt(args[n].substring(2,3));
            problem[i][j] = val;
        }
        return problem;
    }

    static void writeMatrix(int[][] solution) {
        for (int i = 0; i < 9; ++i) {
//            if (i % 3 == 0)
//                System.out.println(" -----------------------");
            for (int j = 0; j < 9; ++j) {
//                if (j % 3 == 0) System.out.print("| ");
               
                                 System.out.print((solution[i][j]));
                System.out.print(" ");
                
            }
            System.out.println("");
        }
       
    }

}








